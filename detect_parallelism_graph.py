# -*- coding: utf-8 -*-
from collections import defaultdict
import pickle
import os

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.font_manager import FontProperties
import pylab

def get_color_generator(NUM_COLORS, cm=pylab.get_cmap('gist_rainbow')):
    return (cm(1.*i/NUM_COLORS) for i in range(NUM_COLORS))

def graph_data(data, file_name_prefix):
    file_name_eps = file_name_prefix + '.eps'
    assert not os.path.exists(file_name_eps)

    res_max = defaultdict(list)
    res_median = defaultdict(list)
    res_sd = defaultdict(list)

    for line in data.values:
        assert len(line) == 7 #identifier, max, mean, median, min, parallelism, sd
        method, max, mean, median, min, parallelism, sd = line

        parallelism = float(parallelism)

        res_max[method].append((parallelism, max))
        res_median[method].append((parallelism, median))
        res_sd[method].append((parallelism, sd))

    for k, v in res_max.items():
        res_max[k] = sorted(v)
    for k, v in res_median.items():
        res_median[k] = sorted(v)
    for k, v in res_sd.items():
        res_sd[k] = sorted(v)

    fig = plt.figure()
    fontP = FontProperties()
    fontP.set_size('small')

    def plot_part(title, res, subplot_nr, set_xlabel=None, set_ylabel=None):
        ax = fig.add_subplot(subplot_nr)
        ax.set_title(title, fontsize=14)
        ax.grid()
        if set_xlabel:
            ax.set_xlabel(set_xlabel,fontsize=12)
        if set_ylabel:
            ax.set_ylabel(set_ylabel,fontsize=12)
        color_generator = get_color_generator(len(res.keys()))
        for method_name, data_points in res.items():
            x_axis = []
            y_axis = []
            for p, y in data_points:
                x_axis.append(p)
                y_axis.append(y)
            ax.plot(x_axis, y_axis,
                'x-',
                #linestyle=line_style, #'solid', 'dashdot', 'dotted'
                color=color_generator.next(),
                label=method_name
            )

        if subplot_nr == 311:
            #legend([ax], "title", prop = fontP)
            ax.legend(prop = fontP) #loc=2) # loc=2 upper left

    plot_part(
        title="Median response time",
        res=res_median,
        subplot_nr=311,
        set_ylabel="Lookup time (s)"
    )
    plot_part(
        title="Maximum response time",
        res=res_max,
        subplot_nr=312,
        set_ylabel="Lookup time (s)"
    )
    plot_part(
        title="Standard deviation of response times",
        res=res_sd,
        subplot_nr=313,
        set_xlabel="Parallelism (worker count)"
    )
    fig.tight_layout()

    fig.savefig(file_name_eps, format='eps')
    print "Saved graph to {0}".format(file_name_eps)


def main():
    import argparse
    parser = argparse.ArgumentParser("Graph result from detect-parallelism.py")
    parser.add_argument("pickled_df_results",
        help="Filename of the pickled DataFrame result file generated by detect-parallelism.py"
    )
    pickled_df_results = parser.parse_args().pickled_df_results
    assert os.path.exists(pickled_df_results)

    with open(pickled_df_results) as fp:
        df = pickle.load(fp)

    graph_data(data=df, file_name_prefix=pickled_df_results.replace('.pickle',''))
